// <auto-generated />
using System;
using GymProject.Infrastructure.Persistence.EFContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GymProject.Infrastructure.Migrations
{
    [DbContext(typeof(GymContext))]
    [Migration("20190909151726_Test")]
    partial class Test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview9.19423.6");

            modelBuilder.Entity("GymProject.Domain.SharedKernel.EntryStatusTypeEnum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("EntryStatusType","GymApp");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The entry is visible only to the Owner",
                            Name = "Private"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Public entry waiting for approval",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Public entry visible to everyone",
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Banned entry, visible to nobody",
                            Name = "Banned"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Entry belonging to the DB release",
                            Name = "Native"
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingHashtagAggregate.TrainingHashtagRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EntryStatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntryStatusId");

                    b.ToTable("TrainingHashtag","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanHashtagRelation", b =>
                {
                    b.Property<uint?>("TrainingPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("HashtagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrainingPlanId", "HashtagId");

                    b.HasIndex("HashtagId");

                    b.ToTable("TrainingPlanHashtag","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRelation", b =>
                {
                    b.Property<uint?>("ParentPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("ChildPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChildPlanTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("MessageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParentPlanId", "ChildPlanId");

                    b.HasIndex("ChildPlanId");

                    b.HasIndex("ChildPlanTypeId");

                    b.HasIndex("MessageId");

                    b.ToTable("TrainingPlanRelation","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IsBookmarked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<uint?>("OwnerId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("TrainingPlanNoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrainingPlanNoteId");

                    b.HasIndex("OwnerId", "TrainingPlanNoteId");

                    b.ToTable("TrainingPlan","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanTypeEnum", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("TrainingPlanType","GymApp");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Variant of another plan",
                            Name = "Variant"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Received by another user",
                            Name = "Inherited"
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanMessageAggregate.TrainingPlanMessageRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlanMessage","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanNoteAggregate.TrainingPlanNoteRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlanNote","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleFeedbackEntity", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TrainingScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("UserId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("TrainingScheduleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingScheduleFeedback","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("TrainingPlanId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrainingPlanId")
                        .HasName("IX_TrainingSchedule_TrainingPlanId");

                    b.ToTable("TrainingSchedule","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.UserAccountDomain.UserAggregate.AccountStatusTypeEnum", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("AccountStatusType","GymApp");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Banned"
                        });
                });

            modelBuilder.Entity("GymProject.Domain.UserAccountDomain.UserAggregate.UserRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountStatusTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubscriptionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("strftime('%s', 'now')");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.HasAlternateKey("Salt");

                    b.HasAlternateKey("UserName");

                    b.HasIndex("AccountStatusTypeId");

                    b.ToTable("User","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingHashtagAggregate.TrainingHashtagRoot", b =>
                {
                    b.HasOne("GymProject.Domain.SharedKernel.EntryStatusTypeEnum", "EntryStatus")
                        .WithMany()
                        .HasForeignKey("EntryStatusId");

                    b.OwnsOne("GymProject.Domain.SharedKernel.GenericHashtagValue", "Hashtag", b1 =>
                        {
                            b1.Property<uint>("TrainingHashtagRootId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnName("Body")
                                .HasColumnType("TEXT");

                            b1.HasKey("TrainingHashtagRootId");

                            b1.ToTable("TrainingHashtag");

                            b1.WithOwner()
                                .HasForeignKey("TrainingHashtagRootId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanHashtagRelation", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingHashtagAggregate.TrainingHashtagRoot", null)
                        .WithMany()
                        .HasForeignKey("HashtagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "TrainingPlan")
                        .WithMany("_trainingPlanHashtags")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRelation", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "ChildPlan")
                        .WithMany("RelationsWithParentPlans")
                        .HasForeignKey("ChildPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanTypeEnum", "ChildPlanType")
                        .WithMany()
                        .HasForeignKey("ChildPlanTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanMessageAggregate.TrainingPlanMessageRoot", null)
                        .WithMany()
                        .HasForeignKey("MessageId");

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "ParentPlan")
                        .WithMany("RelationsWithChildPlans")
                        .HasForeignKey("ParentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", b =>
                {
                    b.HasOne("GymProject.Domain.UserAccountDomain.UserAggregate.UserRoot", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanMessageAggregate.TrainingPlanMessageRoot", null)
                        .WithMany()
                        .HasForeignKey("TrainingPlanNoteId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanMessageAggregate.TrainingPlanMessageRoot", b =>
                {
                    b.OwnsOne("GymProject.Domain.SharedKernel.PersonalNoteValue", "Body", b1 =>
                        {
                            b1.Property<uint>("TrainingPlanMessageRootId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnName("Body")
                                .HasColumnType("TEXT")
                                .HasMaxLength(1000);

                            b1.HasKey("TrainingPlanMessageRootId");

                            b1.ToTable("TrainingPlanMessage");

                            b1.WithOwner()
                                .HasForeignKey("TrainingPlanMessageRootId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanNoteAggregate.TrainingPlanNoteRoot", b =>
                {
                    b.OwnsOne("GymProject.Domain.SharedKernel.PersonalNoteValue", "Body", b1 =>
                        {
                            b1.Property<uint>("TrainingPlanNoteRootId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnName("Body")
                                .HasColumnType("TEXT")
                                .HasMaxLength(1000);

                            b1.HasKey("TrainingPlanNoteRootId");

                            b1.ToTable("TrainingPlanNote");

                            b1.WithOwner()
                                .HasForeignKey("TrainingPlanNoteRootId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleFeedbackEntity", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleRoot", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("TrainingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.UserAccountDomain.UserAggregate.UserRoot", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("GymProject.Domain.SharedKernel.PersonalNoteValue", "Comment", b1 =>
                        {
                            b1.Property<uint>("TrainingScheduleFeedbackEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Body")
                                .HasColumnName("Comment")
                                .HasColumnType("TEXT")
                                .HasMaxLength(1000);

                            b1.HasKey("TrainingScheduleFeedbackEntityId");

                            b1.ToTable("TrainingScheduleFeedback");

                            b1.WithOwner()
                                .HasForeignKey("TrainingScheduleFeedbackEntityId");
                        });

                    b.OwnsOne("GymProject.Domain.SharedKernel.RatingValue", "Rating", b1 =>
                        {
                            b1.Property<uint>("TrainingScheduleFeedbackEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<float>("Value")
                                .HasColumnName("Rating")
                                .HasColumnType("REAL");

                            b1.HasKey("TrainingScheduleFeedbackEntityId");

                            b1.ToTable("TrainingScheduleFeedback");

                            b1.WithOwner()
                                .HasForeignKey("TrainingScheduleFeedbackEntityId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleRoot", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", null)
                        .WithMany()
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("GymProject.Domain.SharedKernel.DateRangeValue", "ScheduledPeriod", b1 =>
                        {
                            b1.Property<uint>("TrainingScheduleRootId")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime?>("End")
                                .HasColumnName("EndDate")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime?>("Start")
                                .IsRequired()
                                .HasColumnName("StartDate")
                                .HasColumnType("INTEGER");

                            b1.HasKey("TrainingScheduleRootId");

                            b1.ToTable("TrainingSchedule");

                            b1.WithOwner()
                                .HasForeignKey("TrainingScheduleRootId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.UserAccountDomain.UserAggregate.UserRoot", b =>
                {
                    b.HasOne("GymProject.Domain.UserAccountDomain.UserAggregate.AccountStatusTypeEnum", "AccountStatusType")
                        .WithMany()
                        .HasForeignKey("AccountStatusTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
