// <auto-generated />
using System;
using GymProject.Infrastructure.Persistence.EFContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GymProject.Infrastructure.Migrations
{
    [DbContext(typeof(GymContext))]
    partial class GymContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview9.19423.6");

            modelBuilder.Entity("GymProject.Domain.BodyDomain.MuscleGroupAggregate.MuscleGroupRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Abbreviation");

                    b.HasAlternateKey("Name");

                    b.ToTable("MuscleGroup","GymApp");

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            Abbreviation = "Chest",
                            Name = "Chest"
                        },
                        new
                        {
                            Id = 2u,
                            Abbreviation = "Delt",
                            Name = "Shoulders"
                        },
                        new
                        {
                            Id = 3u,
                            Abbreviation = "Bis",
                            Name = "Biceps"
                        },
                        new
                        {
                            Id = 4u,
                            Abbreviation = "Tris",
                            Name = "Triceps"
                        },
                        new
                        {
                            Id = 5u,
                            Abbreviation = "FArm",
                            Name = "Forearms"
                        },
                        new
                        {
                            Id = 6u,
                            Abbreviation = "Trap",
                            Name = "Trapezius"
                        },
                        new
                        {
                            Id = 7u,
                            Abbreviation = "Back",
                            Name = "Back"
                        },
                        new
                        {
                            Id = 8u,
                            Abbreviation = "Abs",
                            Name = "Abdomen"
                        },
                        new
                        {
                            Id = 9u,
                            Abbreviation = "Glute",
                            Name = "Glutes"
                        },
                        new
                        {
                            Id = 10u,
                            Abbreviation = "Quad",
                            Name = "Quadriceps"
                        },
                        new
                        {
                            Id = 11u,
                            Abbreviation = "Hams",
                            Name = "Hamstrings"
                        },
                        new
                        {
                            Id = 12u,
                            Abbreviation = "Calf",
                            Name = "Calves"
                        });
                });

            modelBuilder.Entity("GymProject.Domain.SharedKernel.EntryStatusTypeEnum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("EntryStatusType","GymApp");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The entry is visible only to the Owner",
                            Name = "Private"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Public entry waiting for approval",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Public entry visible to everyone",
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Banned entry, visible to nobody",
                            Name = "Banned"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Entry belonging to the DB release",
                            Name = "Native"
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.Common.TrainingEffortTypeEnum", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(4);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Abbreviation");

                    b.HasAlternateKey("Name");

                    b.ToTable("TrainingEffortType","GymApp");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "%",
                            Description = "Percentage of 1RM",
                            Name = "Intensity"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "RM",
                            Description = "The most weight you can lift for a defined number of exercise movements",
                            Name = "RM"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "RPE",
                            Description = "Self-assessed measure of the difficulty of a training set",
                            Name = "RPE"
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.Common.TrainingWeekTypeEnum", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("TrainingWeekType","GymApp");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Description = "Not specified",
                            Name = "Not Set"
                        },
                        new
                        {
                            Id = 1,
                            Description = "Generic week with no specific target",
                            Name = "Generic"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Active recovery week",
                            Name = "Deload"
                        },
                        new
                        {
                            Id = 3,
                            Description = "No training week",
                            Name = "Full Rest"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Relief phase before a test",
                            Name = "Tapering"
                        },
                        new
                        {
                            Id = 5,
                            Description = "High stress week",
                            Name = "Overreach"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Peak performance oriented week",
                            Name = "Peak"
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.ExcerciseAggregate.ExcerciseRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntryStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("EntryStatusId");

                    b.ToTable("Excercise","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.IntensityTechniqueAggregate.IntensityTechniqueRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(4);

                    b.Property<int>("EntryStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IsLinkingTechnique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint?>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("Abbreviation");

                    b.HasAlternateKey("Name");

                    b.HasIndex("EntryStatusId");

                    b.HasIndex("OwnerId");

                    b.ToTable("IntensityTechnique","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingHashtagAggregate.TrainingHashtagRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntryStatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EntryStatusId");

                    b.ToTable("TrainingHashtag","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPhaseAggregate.TrainingPhaseRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntryStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("EntryStatusId");

                    b.ToTable("TrainingPhase","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanHashtagRelation", b =>
                {
                    b.Property<uint?>("TrainingPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("HashtagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrainingPlanId", "HashtagId");

                    b.HasIndex("HashtagId");

                    b.ToTable("TrainingPlanHashtag","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanMuscleFocusRelation", b =>
                {
                    b.Property<uint?>("TrainingPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("MuscleGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrainingPlanId", "MuscleGroupId");

                    b.HasIndex("MuscleGroupId");

                    b.ToTable("TrainingPlanMuscleFocus","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanPhaseRelation", b =>
                {
                    b.Property<uint?>("TrainingPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("TrainingPhaseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrainingPlanId", "TrainingPhaseId");

                    b.HasIndex("TrainingPhaseId");

                    b.ToTable("TrainingPlanPhase","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanProficiencyRelation", b =>
                {
                    b.Property<uint?>("TrainingPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("TrainingProficiencyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TrainingPlanId", "TrainingProficiencyId");

                    b.HasIndex("TrainingProficiencyId");

                    b.ToTable("TrainingPlanProficiency","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRelation", b =>
                {
                    b.Property<uint?>("ParentPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("ChildPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChildPlanTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("MessageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParentPlanId", "ChildPlanId");

                    b.HasIndex("ChildPlanId");

                    b.HasIndex("ChildPlanTypeId");

                    b.HasIndex("MessageId");

                    b.ToTable("TrainingPlanRelation","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IsBookmarked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<uint?>("OwnerId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("TrainingPlanNoteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrainingPlanNoteId");

                    b.HasIndex("OwnerId", "TrainingPlanNoteId");

                    b.ToTable("TrainingPlan","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanTypeEnum", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("TrainingPlanType","GymApp");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Variant of another plan",
                            Name = "Variant"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Received by another user",
                            Name = "Inherited"
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingWeekEntity", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ProgressiveNumber")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TrainingPlanId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TrainingWeekTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("TrainingPlanId", "ProgressiveNumber");

                    b.HasIndex("TrainingWeekTypeId");

                    b.ToTable("TrainingWeek","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanMessageAggregate.TrainingPlanMessageRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlanMessage","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanNoteAggregate.TrainingPlanNoteRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlanNote","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingProficiencyAggregate.TrainingProficiencyRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntryStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("EntryStatusId");

                    b.ToTable("TrainingProficiency","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleFeedbackEntity", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TrainingScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("UserId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("TrainingScheduleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingScheduleFeedback","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("TrainingPlanId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TrainingPlanId")
                        .HasName("IX_TrainingSchedule_TrainingPlanId");

                    b.ToTable("TrainingSchedule","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkUnitTemplateNote.WorkUnitTemplateNoteRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WorkUnitTemplateNote","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkingSetNote.WorkingSetNoteRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WorkingSetNote","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutSessionAggregate.WorkUnitEntity", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("ExcerciseId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ProgressiveNumber")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("WorkoutSessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExcerciseId");

                    b.HasIndex("WorkoutSessionId", "ProgressiveNumber")
                        .IsUnique();

                    b.ToTable("WorkUnit","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutSessionAggregate.WorkingSetEntity", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float?>("Load")
                        .HasColumnName("WeightKg")
                        .HasColumnType("DECIMAL");

                    b.Property<uint?>("NoteId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ProgressiveNumber")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("WorkUnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("WorkUnitId", "ProgressiveNumber");

                    b.HasIndex("NoteId");

                    b.ToTable("WorkingSet","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutSessionAggregate.WorkoutSessionRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EndTime")
                        .HasColumnType("INTEGER");

                    b.Property<long>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("strftime('%s', 'now')");

                    b.Property<uint?>("WorkoutTemplateId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutTemplateId");

                    b.ToTable("WorkoutSession","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutTemplateAggregate.WorkUnitTemplateEntity", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("ExcerciseId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("LinkingIntensityTechniqueId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ProgressiveNumber")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("WorkUnitNoteId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("WorkoutTemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExcerciseId");

                    b.HasIndex("LinkingIntensityTechniqueId");

                    b.HasIndex("WorkUnitNoteId");

                    b.HasIndex("WorkoutTemplateId", "ProgressiveNumber")
                        .IsUnique();

                    b.ToTable("WorkUnitTemplate","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutTemplateAggregate.WorkingSetIntensityTechniqueRelation", b =>
                {
                    b.Property<uint?>("WorkingSetId")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("IntensityTechniqueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkingSetId", "IntensityTechniqueId");

                    b.HasIndex("IntensityTechniqueId");

                    b.ToTable("WorkingSetIntensityTechnique","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutTemplateAggregate.WorkingSetTemplateEntity", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ProgressiveNumber")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("WorkUnitTemplateId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkUnitTemplateId", "ProgressiveNumber")
                        .IsUnique();

                    b.ToTable("WorkingSetTemplate","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutTemplateAggregate.WorkoutTemplateRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("ProgressiveNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SpecificWeekday")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<uint?>("TrainingWeekId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name", "TrainingWeekId");

                    b.HasAlternateKey("ProgressiveNumber", "TrainingWeekId");

                    b.HasIndex("TrainingWeekId");

                    b.ToTable("WorkoutTemplate","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.UserAccountDomain.UserAggregate.AccountStatusTypeEnum", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("AccountStatusType","GymApp");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Inactive"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Banned"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Super"
                        });
                });

            modelBuilder.Entity("GymProject.Domain.UserAccountDomain.UserAggregate.UserRoot", b =>
                {
                    b.Property<uint?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountStatusTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SubscriptionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("strftime('%s', 'now')");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.HasAlternateKey("Salt");

                    b.HasAlternateKey("UserName");

                    b.HasIndex("AccountStatusTypeId");

                    b.ToTable("User","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.ExcerciseAggregate.ExcerciseRoot", b =>
                {
                    b.HasOne("GymProject.Domain.SharedKernel.EntryStatusTypeEnum", "EntryStatus")
                        .WithMany()
                        .HasForeignKey("EntryStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("GymProject.Domain.SharedKernel.PersonalNoteValue", "Description", b1 =>
                        {
                            b1.Property<uint>("ExcerciseRootId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Body")
                                .HasColumnName("Description")
                                .HasColumnType("TEXT");

                            b1.HasKey("ExcerciseRootId");

                            b1.ToTable("Excercise");

                            b1.WithOwner()
                                .HasForeignKey("ExcerciseRootId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.IntensityTechniqueAggregate.IntensityTechniqueRoot", b =>
                {
                    b.HasOne("GymProject.Domain.SharedKernel.EntryStatusTypeEnum", "EntryStatus")
                        .WithMany()
                        .HasForeignKey("EntryStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.UserAccountDomain.UserAggregate.UserRoot", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("GymProject.Domain.SharedKernel.PersonalNoteValue", "Description", b1 =>
                        {
                            b1.Property<uint>("IntensityTechniqueRootId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Body")
                                .HasColumnName("Description")
                                .HasColumnType("TEXT");

                            b1.HasKey("IntensityTechniqueRootId");

                            b1.ToTable("IntensityTechnique");

                            b1.WithOwner()
                                .HasForeignKey("IntensityTechniqueRootId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingHashtagAggregate.TrainingHashtagRoot", b =>
                {
                    b.HasOne("GymProject.Domain.SharedKernel.EntryStatusTypeEnum", "EntryStatus")
                        .WithMany()
                        .HasForeignKey("EntryStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("GymProject.Domain.SharedKernel.GenericHashtagValue", "Hashtag", b1 =>
                        {
                            b1.Property<uint>("TrainingHashtagRootId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnName("Body")
                                .HasColumnType("TEXT");

                            b1.HasKey("TrainingHashtagRootId");

                            b1.ToTable("TrainingHashtag");

                            b1.WithOwner()
                                .HasForeignKey("TrainingHashtagRootId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPhaseAggregate.TrainingPhaseRoot", b =>
                {
                    b.HasOne("GymProject.Domain.SharedKernel.EntryStatusTypeEnum", "EntryStatus")
                        .WithMany()
                        .HasForeignKey("EntryStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanHashtagRelation", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingHashtagAggregate.TrainingHashtagRoot", null)
                        .WithMany()
                        .HasForeignKey("HashtagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "TrainingPlan")
                        .WithMany("_trainingPlanHashtags")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanMuscleFocusRelation", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingHashtagAggregate.TrainingHashtagRoot", null)
                        .WithMany()
                        .HasForeignKey("MuscleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "TrainingPlan")
                        .WithMany("_trainingPlanMuscleFocusIds")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanPhaseRelation", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPhaseAggregate.TrainingPhaseRoot", null)
                        .WithMany()
                        .HasForeignKey("TrainingPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "TrainingPlan")
                        .WithMany("_trainingPlanPhases")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanProficiencyRelation", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "TrainingPlan")
                        .WithMany("_trainingPlanProficiencies")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingProficiencyAggregate.TrainingProficiencyRoot", null)
                        .WithMany()
                        .HasForeignKey("TrainingProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRelation", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "ChildPlan")
                        .WithMany("RelationsWithParentPlans")
                        .HasForeignKey("ChildPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanTypeEnum", "ChildPlanType")
                        .WithMany()
                        .HasForeignKey("ChildPlanTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanMessageAggregate.TrainingPlanMessageRoot", null)
                        .WithMany()
                        .HasForeignKey("MessageId");

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "ParentPlan")
                        .WithMany("RelationsWithChildPlans")
                        .HasForeignKey("ParentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", b =>
                {
                    b.HasOne("GymProject.Domain.UserAccountDomain.UserAggregate.UserRoot", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanNoteAggregate.TrainingPlanNoteRoot", null)
                        .WithMany()
                        .HasForeignKey("TrainingPlanNoteId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingWeekEntity", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", null)
                        .WithMany("TrainingWeeks")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.Common.TrainingWeekTypeEnum", "TrainingWeekType")
                        .WithMany()
                        .HasForeignKey("TrainingWeekTypeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanMessageAggregate.TrainingPlanMessageRoot", b =>
                {
                    b.OwnsOne("GymProject.Domain.SharedKernel.PersonalNoteValue", "Body", b1 =>
                        {
                            b1.Property<uint>("TrainingPlanMessageRootId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnName("Body")
                                .HasColumnType("TEXT")
                                .HasMaxLength(1000);

                            b1.HasKey("TrainingPlanMessageRootId");

                            b1.ToTable("TrainingPlanMessage");

                            b1.WithOwner()
                                .HasForeignKey("TrainingPlanMessageRootId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanNoteAggregate.TrainingPlanNoteRoot", b =>
                {
                    b.OwnsOne("GymProject.Domain.SharedKernel.PersonalNoteValue", "Body", b1 =>
                        {
                            b1.Property<uint>("TrainingPlanNoteRootId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnName("Body")
                                .HasColumnType("TEXT")
                                .HasMaxLength(1000);

                            b1.HasKey("TrainingPlanNoteRootId");

                            b1.ToTable("TrainingPlanNote");

                            b1.WithOwner()
                                .HasForeignKey("TrainingPlanNoteRootId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingProficiencyAggregate.TrainingProficiencyRoot", b =>
                {
                    b.HasOne("GymProject.Domain.SharedKernel.EntryStatusTypeEnum", "EntryStatus")
                        .WithMany()
                        .HasForeignKey("EntryStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("GymProject.Domain.SharedKernel.PersonalNoteValue", "Description", b1 =>
                        {
                            b1.Property<uint>("TrainingProficiencyRootId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnName("Description")
                                .HasColumnType("TEXT")
                                .HasMaxLength(1000);

                            b1.HasKey("TrainingProficiencyRootId");

                            b1.ToTable("TrainingProficiency");

                            b1.WithOwner()
                                .HasForeignKey("TrainingProficiencyRootId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleFeedbackEntity", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleRoot", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("TrainingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.UserAccountDomain.UserAggregate.UserRoot", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("GymProject.Domain.SharedKernel.PersonalNoteValue", "Comment", b1 =>
                        {
                            b1.Property<uint>("TrainingScheduleFeedbackEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Body")
                                .HasColumnName("Comment")
                                .HasColumnType("TEXT")
                                .HasMaxLength(1000);

                            b1.HasKey("TrainingScheduleFeedbackEntityId");

                            b1.ToTable("TrainingScheduleFeedback");

                            b1.WithOwner()
                                .HasForeignKey("TrainingScheduleFeedbackEntityId");
                        });

                    b.OwnsOne("GymProject.Domain.SharedKernel.RatingValue", "Rating", b1 =>
                        {
                            b1.Property<uint>("TrainingScheduleFeedbackEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<float>("Value")
                                .HasColumnName("Rating")
                                .HasColumnType("REAL");

                            b1.HasKey("TrainingScheduleFeedbackEntityId");

                            b1.ToTable("TrainingScheduleFeedback");

                            b1.WithOwner()
                                .HasForeignKey("TrainingScheduleFeedbackEntityId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleRoot", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", null)
                        .WithMany()
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("GymProject.Domain.SharedKernel.DateRangeValue", "ScheduledPeriod", b1 =>
                        {
                            b1.Property<uint>("TrainingScheduleRootId")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime?>("End")
                                .HasColumnName("EndDate")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime?>("Start")
                                .IsRequired()
                                .HasColumnName("StartDate")
                                .HasColumnType("INTEGER");

                            b1.HasKey("TrainingScheduleRootId");

                            b1.ToTable("TrainingSchedule");

                            b1.WithOwner()
                                .HasForeignKey("TrainingScheduleRootId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkUnitTemplateNote.WorkUnitTemplateNoteRoot", b =>
                {
                    b.OwnsOne("GymProject.Domain.SharedKernel.PersonalNoteValue", "Body", b1 =>
                        {
                            b1.Property<uint>("WorkUnitTemplateNoteRootId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnName("Body")
                                .HasColumnType("TEXT")
                                .HasMaxLength(1000);

                            b1.HasKey("WorkUnitTemplateNoteRootId");

                            b1.ToTable("WorkUnitTemplateNote");

                            b1.WithOwner()
                                .HasForeignKey("WorkUnitTemplateNoteRootId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkingSetNote.WorkingSetNoteRoot", b =>
                {
                    b.OwnsOne("GymProject.Domain.SharedKernel.PersonalNoteValue", "Body", b1 =>
                        {
                            b1.Property<uint>("WorkingSetNoteRootId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnName("Body")
                                .HasColumnType("TEXT")
                                .HasMaxLength(1000);

                            b1.HasKey("WorkingSetNoteRootId");

                            b1.ToTable("WorkingSetNote");

                            b1.WithOwner()
                                .HasForeignKey("WorkingSetNoteRootId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutSessionAggregate.WorkUnitEntity", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.ExcerciseAggregate.ExcerciseRoot", null)
                        .WithMany()
                        .HasForeignKey("ExcerciseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.WorkoutSessionAggregate.WorkoutSessionRoot", null)
                        .WithMany("WorkUnits")
                        .HasForeignKey("WorkoutSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("GymProject.Domain.SharedKernel.RatingValue", "UserRating", b1 =>
                        {
                            b1.Property<uint>("WorkUnitEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<float>("Value")
                                .HasColumnName("Rating")
                                .HasColumnType("DECIMAL");

                            b1.HasKey("WorkUnitEntityId");

                            b1.ToTable("WorkUnit");

                            b1.WithOwner()
                                .HasForeignKey("WorkUnitEntityId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutSessionAggregate.WorkingSetEntity", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.WorkingSetNote.WorkingSetNoteRoot", null)
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GymProject.Domain.TrainingDomain.WorkoutSessionAggregate.WorkUnitEntity", null)
                        .WithMany("WorkingSets")
                        .HasForeignKey("WorkUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("GymProject.Domain.TrainingDomain.Common.WSRepetitionsValue", "Repetitions", b1 =>
                        {
                            b1.Property<uint>("WorkingSetEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Value")
                                .HasColumnName("Repetitions")
                                .HasColumnType("INTEGER");

                            b1.HasKey("WorkingSetEntityId");

                            b1.ToTable("WorkingSet");

                            b1.WithOwner()
                                .HasForeignKey("WorkingSetEntityId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutSessionAggregate.WorkoutSessionRoot", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.WorkoutTemplateAggregate.WorkoutTemplateRoot", null)
                        .WithMany()
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutTemplateAggregate.WorkUnitTemplateEntity", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.ExcerciseAggregate.ExcerciseRoot", null)
                        .WithMany()
                        .HasForeignKey("ExcerciseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.IntensityTechniqueAggregate.IntensityTechniqueRoot", null)
                        .WithMany()
                        .HasForeignKey("LinkingIntensityTechniqueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GymProject.Domain.TrainingDomain.WorkUnitTemplateNote.WorkUnitTemplateNoteRoot", null)
                        .WithMany()
                        .HasForeignKey("WorkUnitNoteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("GymProject.Domain.TrainingDomain.WorkoutTemplateAggregate.WorkoutTemplateRoot", null)
                        .WithMany("WorkUnits")
                        .HasForeignKey("WorkoutTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutTemplateAggregate.WorkingSetIntensityTechniqueRelation", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.IntensityTechniqueAggregate.IntensityTechniqueRoot", null)
                        .WithMany()
                        .HasForeignKey("IntensityTechniqueId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("GymProject.Domain.TrainingDomain.WorkoutTemplateAggregate.WorkingSetTemplateEntity", "WorkingSet")
                        .WithMany("_intensityTechniquesRelations")
                        .HasForeignKey("WorkingSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutTemplateAggregate.WorkingSetTemplateEntity", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.WorkoutTemplateAggregate.WorkUnitTemplateEntity", null)
                        .WithMany("WorkingSets")
                        .HasForeignKey("WorkUnitTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("GymProject.Domain.TrainingDomain.Common.RestPeriodValue", "Rest", b1 =>
                        {
                            b1.Property<uint>("WorkingSetTemplateEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Value")
                                .HasColumnName("Rest")
                                .HasColumnType("INTEGER");

                            b1.HasKey("WorkingSetTemplateEntityId");

                            b1.ToTable("WorkingSetTemplate");

                            b1.WithOwner()
                                .HasForeignKey("WorkingSetTemplateEntityId");
                        });

                    b.OwnsOne("GymProject.Domain.TrainingDomain.Common.TUTValue", "Tempo", b1 =>
                        {
                            b1.Property<uint>("WorkingSetTemplateEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("TUT")
                                .HasColumnName("Cadence")
                                .HasColumnType("TEXT");

                            b1.HasKey("WorkingSetTemplateEntityId");

                            b1.ToTable("WorkingSetTemplate");

                            b1.WithOwner()
                                .HasForeignKey("WorkingSetTemplateEntityId");
                        });

                    b.OwnsOne("GymProject.Domain.TrainingDomain.Common.TrainingEffortValue", "Effort", b1 =>
                        {
                            b1.Property<uint>("WorkingSetTemplateEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<int?>("EffortTypeId")
                                .HasColumnType("INTEGER");

                            b1.Property<float>("Value")
                                .HasColumnName("Effort")
                                .HasColumnType("INTEGER");

                            b1.HasKey("WorkingSetTemplateEntityId");

                            b1.HasIndex("EffortTypeId");

                            b1.ToTable("WorkingSetTemplate");

                            b1.HasOne("GymProject.Domain.TrainingDomain.Common.TrainingEffortTypeEnum", "EffortType")
                                .WithMany()
                                .HasForeignKey("EffortTypeId")
                                .OnDelete(DeleteBehavior.NoAction);

                            b1.WithOwner()
                                .HasForeignKey("WorkingSetTemplateEntityId");
                        });

                    b.OwnsOne("GymProject.Domain.TrainingDomain.Common.WSRepetitionsValue", "Repetitions", b1 =>
                        {
                            b1.Property<uint>("WorkingSetTemplateEntityId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Value")
                                .HasColumnName("TargetRepetitions")
                                .HasColumnType("INTEGER");

                            b1.HasKey("WorkingSetTemplateEntityId");

                            b1.ToTable("WorkingSetTemplate");

                            b1.WithOwner()
                                .HasForeignKey("WorkingSetTemplateEntityId");
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.WorkoutTemplateAggregate.WorkoutTemplateRoot", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingWeekEntity", null)
                        .WithMany()
                        .HasForeignKey("TrainingWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymProject.Domain.UserAccountDomain.UserAggregate.UserRoot", b =>
                {
                    b.HasOne("GymProject.Domain.UserAccountDomain.UserAggregate.AccountStatusTypeEnum", "AccountStatusType")
                        .WithMany()
                        .HasForeignKey("AccountStatusTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
