// <auto-generated />
using System;
using GymProject.Infrastructure.Persistence.EFContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GymProject.Infrastructure.Migrations
{
    [DbContext(typeof(GymContext))]
    [Migration("20190905153401_Test")]
    partial class Test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("GymProject.Domain.Base.uint?", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("TrainingPlanRootId");

                    b.HasKey("Id");

                    b.HasIndex("TrainingPlanRootId");

                    b.ToTable("uint?");
                });

            modelBuilder.Entity("GymProject.Domain.SharedKernel.EntryStatusTypeEnum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("EntryStatusType","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingHashtagAggregate.TrainingHashtagRoot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EntryStatusId");

                    b.HasKey("Id");

                    b.HasIndex("EntryStatusId");

                    b.ToTable("TrainingHashtag","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanHashtagRelation", b =>
                {
                    b.Property<long>("TrainingPlanId");

                    b.Property<long>("HashtagId");

                    b.HasKey("TrainingPlanId", "HashtagId");

                    b.ToTable("TrainingPlanHashtag","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRelation", b =>
                {
                    b.Property<long>("ParentPlanId");

                    b.Property<long>("ChildPlanId");

                    b.Property<int>("ChildPlanTypeId");

                    b.HasKey("ParentPlanId", "ChildPlanId");

                    b.HasIndex("ChildPlanId");

                    b.HasIndex("ChildPlanTypeId");

                    b.ToTable("TrainingPlanRelation","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IsBookmarked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlan","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanTypeEnum", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlanType","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.Base.uint?", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot")
                        .WithMany("MuscleFocusIds")
                        .HasForeignKey("TrainingPlanRootId");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingHashtagAggregate.TrainingHashtagRoot", b =>
                {
                    b.HasOne("GymProject.Domain.SharedKernel.EntryStatusTypeEnum", "EntryStatus")
                        .WithMany()
                        .HasForeignKey("EntryStatusId");

                    b.OwnsOne("GymProject.Domain.SharedKernel.GenericHashtagValue", "Hashtag", b1 =>
                        {
                            b1.Property<long>("TrainingHashtagRootId");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnName("Body")
                                .HasColumnType("TEXT");

                            b1.HasKey("TrainingHashtagRootId");

                            b1.ToTable("TrainingHashtag","GymApp");

                            b1.HasOne("GymProject.Domain.TrainingDomain.TrainingHashtagAggregate.TrainingHashtagRoot")
                                .WithOne("Hashtag")
                                .HasForeignKey("GymProject.Domain.SharedKernel.GenericHashtagValue", "TrainingHashtagRootId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanHashtagRelation", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "TrainingPlan")
                        .WithMany("_trainingPlanHashtags")
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRelation", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "ChildPlan")
                        .WithMany("RelationsWithParentPlans")
                        .HasForeignKey("ChildPlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanTypeEnum", "ChildPlanType")
                        .WithMany()
                        .HasForeignKey("ChildPlanTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "ParentPlan")
                        .WithMany("RelationsWithChildPlans")
                        .HasForeignKey("ParentPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
