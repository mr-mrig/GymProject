using GymProject.Domain.SharedKernel;
using GymProject.Domain.TrainingDomain.TrainingPlanAggregate;
using GymProject.Domain.TrainingDomain.WorkoutTemplateAggregate;
using GymProject.Infrastructure.Persistence.Converters;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace GymProject.Infrastructure.Persistence.EFContext.EntityConfigurations.TrainingDomain
{
    internal class WorkoutTemplateEntityConfiguration : IEntityTypeConfiguration<WorkoutTemplateRoot>
    {


        public void Configure(EntityTypeBuilder<WorkoutTemplateRoot> builder)
        {
            builder.ToTable("WorkoutTemplate", GymContext.DefaultSchema);

            builder.HasKey(wo => wo.Id);

            builder.Property(wo => wo.Id)     // This is generated by the WorkoutReference
                .ValueGeneratedOnAdd();

            builder.Property(w => w.ProgressiveNumber)
                .HasColumnType("INTEGER")
                .IsRequired();

            builder.Ignore(wo => wo.DomainEvents);

            builder.Property(wo => wo.Name)
                .HasColumnType("TEXT")
                .IsRequired();

            //builder.OwnsOne(wo => wo.SpecificWeekday,
            //    sw =>
            //    {
            //        sw.Property(p => p.Id)
            //            .IsRequired()
            //            .HasColumnName("SpecificWeekday")
            //            .HasDefaultValue(0);

            //        sw.Ignore(p => p.Name)
            //            .Ignore(p => p.Abbreviation);

            //    });
            builder.Property(wo => wo.SpecificWeekday)
                .HasConversion(new WeekdayEnumToIntegerValueConverter())
                .HasDefaultValue(WeekdayEnum.Generic);

            builder.HasMany(w => w.WorkUnits)
                .WithOne()
                .HasForeignKey("WorkoutTemplateId")
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);

            var navigation = builder.Metadata.FindNavigation(nameof(WorkoutTemplateRoot.WorkUnits));
            navigation.SetPropertyAccessMode(PropertyAccessMode.Field);

            builder.HasOne<TrainingWeekEntity>()
                .WithMany()
                .HasForeignKey(x => x.TrainingWeekId)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade);

            builder.HasAlternateKey
            (
                "ProgressiveNumber",
                "TrainingWeekId"
            );

            builder.HasAlternateKey
            (
                "Name",
                "TrainingWeekId"
            );
        }

    }
}
