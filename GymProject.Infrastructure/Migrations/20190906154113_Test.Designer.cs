// <auto-generated />
using System;
using GymProject.Infrastructure.Persistence.EFContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GymProject.Infrastructure.Migrations
{
    [DbContext(typeof(GymContext))]
    [Migration("20190906154113_Test")]
    partial class Test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("GymProject.Domain.SharedKernel.EntryStatusTypeEnum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("EntryStatusType","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRelation", b =>
                {
                    b.Property<uint>("ParentPlanId");

                    b.Property<uint>("ChildPlanId");

                    b.Property<int>("ChildPlanTypeId");

                    b.HasKey("ParentPlanId", "ChildPlanId");

                    b.HasIndex("ChildPlanId");

                    b.HasIndex("ChildPlanTypeId");

                    b.ToTable("TrainingPlanRelation","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IsBookmarked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlan","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanTypeEnum", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("TrainingPlanType","GymApp");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Variant of another plan",
                            Name = "Variant"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Received by another user",
                            Name = "Inherited"
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleFeedbackEntity", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<uint>("TrainingScheduleId");

                    b.HasKey("Id");

                    b.HasIndex("TrainingScheduleId");

                    b.ToTable("TrainingScheduleFeedback","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleRoot", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<uint>("TrainingPlanId");

                    b.HasKey("Id");

                    b.HasIndex("TrainingPlanId");

                    b.ToTable("TrainingSchedule","GymApp");
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRelation", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "ChildPlan")
                        .WithMany("RelationsWithParentPlans")
                        .HasForeignKey("ChildPlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanTypeEnum", "ChildPlanType")
                        .WithMany()
                        .HasForeignKey("ChildPlanTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot", "ParentPlan")
                        .WithMany("RelationsWithChildPlans")
                        .HasForeignKey("ParentPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleFeedbackEntity", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleRoot")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TrainingScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("GymProject.Domain.SharedKernel.PersonalNoteValue", "Comment", b1 =>
                        {
                            b1.Property<uint>("TrainingScheduleFeedbackEntityId");

                            b1.Property<string>("Body")
                                .HasColumnName("Comment")
                                .HasMaxLength(1000);

                            b1.HasKey("TrainingScheduleFeedbackEntityId");

                            b1.ToTable("TrainingScheduleFeedback","GymApp");

                            b1.HasOne("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleFeedbackEntity")
                                .WithOne("Comment")
                                .HasForeignKey("GymProject.Domain.SharedKernel.PersonalNoteValue", "TrainingScheduleFeedbackEntityId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("GymProject.Domain.SharedKernel.RatingValue", "Rating", b1 =>
                        {
                            b1.Property<uint>("TrainingScheduleFeedbackEntityId");

                            b1.Property<float>("Value")
                                .HasColumnName("Rating");

                            b1.HasKey("TrainingScheduleFeedbackEntityId");

                            b1.ToTable("TrainingScheduleFeedback","GymApp");

                            b1.HasOne("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleFeedbackEntity")
                                .WithOne("Rating")
                                .HasForeignKey("GymProject.Domain.SharedKernel.RatingValue", "TrainingScheduleFeedbackEntityId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleRoot", b =>
                {
                    b.HasOne("GymProject.Domain.TrainingDomain.TrainingPlanAggregate.TrainingPlanRoot")
                        .WithMany()
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("GymProject.Domain.SharedKernel.DateRangeValue", "ScheduledPeriod", b1 =>
                        {
                            b1.Property<uint>("TrainingScheduleRootId");

                            b1.Property<DateTime>("End")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("Start")
                                .HasColumnName("StartDate");

                            b1.HasKey("TrainingScheduleRootId");

                            b1.ToTable("TrainingSchedule","GymApp");

                            b1.HasOne("GymProject.Domain.TrainingDomain.TrainingScheduleAggregate.TrainingScheduleRoot")
                                .WithOne("ScheduledPeriod")
                                .HasForeignKey("GymProject.Domain.SharedKernel.DateRangeValue", "TrainingScheduleRootId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
